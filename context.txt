App Objective:
You are building a restaurant recommendation app where users can input their past favorite restaurants and receive personalized recommendations for similar restaurants in a specific city. Initially, this is for a single user, but it will eventually support multiple users and automatically track dining history.

Phase 1: Single User Input and Recommendations
User Inputs: The user will enter:
Number of people in their group.
Up to 5 favorite restaurants they have liked.
City for the restaurant search.
System Output: Based on the user’s input, the system will recommend 3 similar restaurants in the defined city.
Functionality for the Initial Version:
User Input:

The user enters favorite restaurants and a city.
Recommendation Logic:

The app uses GPT-4 via the OpenAI API to find similar restaurants. It constructs a prompt based on the user’s favorite restaurants and city, then gets recommendations from GPT-4.
Modular Design:

The recommendation logic is modular, allowing you to switch from GPT-4 to other APIs (e.g., OpenTable, Yelp) in the future.
Current Progress:
Backend (Flask):
You’ve set up a basic Flask app to handle:

A root route (/) to verify the server is running.
A POST route (/get_recommendations) to receive user input and return restaurant recommendations.
The app is integrated with the GPT-4 API, and the function get_similar_restaurants sends a request to GPT-4 to generate restaurant recommendations.

Testing:
You’ve been testing the app via a browser for the root route (/) and are now moving to testing the POST route with Postman.
Postman Setup:
You are using Postman to send POST requests to the /get_recommendations endpoint with a JSON payload that contains the user’s favorite restaurants and the city. The Flask server responds with a JSON list of recommended restaurants.

Next Steps:
Test the functionality using Postman and ensure the GPT-4 API integration works correctly.
Handle error cases (e.g., invalid input, API failures).
Refine the recommendation logic or prompt construction if needed to improve the quality of restaurant suggestions.
Future Enhancements:
Expand to Multiple Users: Allow multiple users to input preferences and receive mutually acceptable restaurant recommendations.
Automatic History Tracking: In future phases, the app will track users' dining history to automate recommendations without manual input.

Database Structure & Schema Design:
Key Entities:

User:
Tracks user profiles and, eventually, preferences (e.g., cuisine, dining frequency).

Restaurant:
Stores restaurant metadata (name, location, cuisine type, etc.).
This will be used to identify similar restaurants and store restaurant details for the recommendation engine.

UserRestaurantInteraction:
Tracks the relationship between users and restaurants (likes, visits, ratings).
This entity will evolve to track user behavior, helping refine recommendations.

Recommendation:
Stores historical recommendations provided to users or user groups.
Tracks which restaurants were suggested for analysis and improving the algorithm.

# Restaurant Preferences Tab

The Restaurant Preferences tab allows users to set their preferences for restaurants in the system. Here's how it works:

1. User Interface:
   - Users enter their name in a text field
   - "Show Restaurants" button becomes blue and clickable only when name is entered
   - Each restaurant has a three-state toggle: Like/Neutral/Dislike
   - A "Save Preferences" button appears after restaurants are loaded

2. Loading Preferences:
   - When user clicks "Show Restaurants":
     * All restaurants are initially set to "neutral" state
     * System loads any existing preferences from database
     * Toggle buttons are updated to reflect stored preferences

3. User Interactions:
   - Users can click any of the three states for each restaurant
   - Only one state can be active at a time
   - Multiple restaurants can be updated before saving
   - Visual feedback: Like (green), Dislike (red), Neutral (gray)

4. Saving Preferences:
   - Only changed preferences are sent to the database
   - Any preference change (including to neutral) is stored
   - Restaurants that have never been interacted with have no database record
   - The Save button only appears when there are unsaved changes

5. Database Storage:
   - UserRestaurantPreference table stores all user-restaurant interactions
   - Stores Like/Dislike/Neutral preferences for any restaurant the user has interacted with
   - No record exists for restaurants the user has never interacted with
   - Each preference includes a timestamp for tracking changes

6. Backend Implementation:
   - Preferences are stored in UserRestaurantPreference table
   - Each record contains: user_id, restaurant_id, preference (enum), timestamp
   - PreferenceType enum includes: like, dislike, neutral
   - All preference changes are stored, including changes to neutral
   - Timestamps are updated whenever preferences change
   - GET /get_user_preferences:
     * Fetches all preferences for a given user
     * Returns array of {restaurant_id, preference} objects
   - POST /save_preferences:
     * Accepts array of changed preferences
     * Updates existing records or creates new ones
     * Updates timestamps for tracking preference history
     * Only processes preferences that have changed from current state